name: Publish Docker image
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  publish-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-18.04
    container: scoir/canis-build:latest
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Prepare
      id: prep
      run: |
        DOCKER_IMAGE=canislabs/canis-test
        VERSION=${GITHUB_REF#refs/tags/}

        TAGS="${DOCKER_IMAGE}:${VERSION}"
        if echo $VERSION | grep -Eq  '^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
        fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Docker build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./docker/Dockerfile
        platforms: linux/amd64
        push: true
        tags: ${{ steps.prep.outputs.tags }}

    - name: Helm package
      run: |
        helm package -u -d docs/ --app-version ${{ steps.prep.outputs.version }} --version ${{ steps.prep.outputs.version }} canis-chart-test/

    - name: Upload helm package to release
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./docs/canis-chart-test-${{steps.prep.outputs.version}}.tgz
        asset_name: canis-chart-test-${{steps.prep.outputs.version}}.tgz
        asset_content_type: application/gzip
